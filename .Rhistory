source('~/.active-rstudio-document')
makeCacheMatrix(1:4)
cacheSolve(1:4)
cacheSolve(c(1:4,4:1)
cacheSolve(c(1:4,4:1))
mtrx <- matrix(c(7,3,-2,5),2,2)
cacheMtrx <- makeCacheMatrix(mtrx)
cacheSolve(cacheMtrx)
cacheSolve(cacheMtrx)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y)
plot(x)
points(x)
points(y)
par("pch")
help par
par help
?par
?pch
png()
plot(x,y)
lines(x)
plot(x)
plot(9)
plot(9,8)
z <- rnorm(100)
plot(x,y)
plot(z)
plot(z)
plot(x,y)
plot(x,y)
plot(x)
hist(x)
x11()
plot(x)
x11()
x11()
hist(x)
png()
x11()
x11()
dev.cur()
dev.set(2)
dev.set(1)
plot(x,y)
plot(x,z)
lines(y)
dev.copy2pdf()
install.packages("lattice")
library("lattice")
xyplot(1,2)
xyplot(1.2)
xyplot(c(1,1))
xyplot(c(1,1),c(1,1))
?xyplot
data <-c(1:5,5:1)
xyplot(data)
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
a <- xyplot(lat ~ long | Depth, data = quakes)
class(a)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
points(1)
panel.lmline(2)
panel.lmline("Text")
panel.lmline("Text")
panel.lmline("Text")
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print.trellis()
splom()
library(datasets)
data(airquality)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
ggplot(movies, aes(votes, rating))
setwd("~/Dropbox/Coursera/Getting and Cleaning Data")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
colnames(data_set)
data_set_tidy <- cbind(data_set_subject,data_set)
colnames(data_set_tidy)
colnames(data_set_tidy) <- c("Subject",colnames(data_set))
colnames(data_set_tidy)
sapply(data_set_tidy,mean())
sapply(data_set_tidy,mean
sapply(data_set_tidy,mean)
?apply
?agggregate()
?aggreagte
?aggregate
aggregate(data_set_tidy,data_set_tidy[,c(1:2)])
aggregate(data_set_tidy,data_set_tidy[,c(1:2)],mean)
head(aggregate(data_set_tidy,data_set_tidy[,c(1:2)],mean))
head(aggregate(data_set_tidy[,c(-1,-2)],data_set_tidy[,c(1:2)],mean))
new <- aggregate(data_set_tidy[,c(-1,-2)],data_set_tidy[,c(1:2)],mean)
library(data.table)
DT <- data.table(data_set_tidy)
DT[,mean(),by = Activity,Subject]
head(DT)
DT[,mean(5),by = Activity,Subject]
?data.table
DT[,mean(5),by = c("Activity,Subject")]
unique(data_set_subject)
unique(data_set_subject$2)
unique(data_set_subject$V2)
unique(data_set_subject$)
unique(data_set_subject)
unique(data_set_tidy$Subject)
DT[,mean(5),by = c("Activity,Subject")]
DT[,mean(features$V2,by = c("Activity,Subject")]
DT[,mean(features$V2),by = c("Activity,Subject")]
DT[,mean(c(5:50)),by = c("Activity,Subject")]
DT[,mean("Subject"),by = c("Activity,Subject")]
DT[,mean(Subject),by = c("Activity,Subject")]
DT[,mean(colnames(DT)),by = c("Activity,Subject")]
DT[,mean(Subject,Subject),by = c("Activity,Subject")]
DT[,mean(Subject),by = c("Activity,Subject")]
DT[,mean(Subject,Activity),by = c("Activity,Subject")]
DT[,mean(Subject),by = c("Activity,Subject")]
DT[,mean(DT[,5]),by = c("Activity,Subject")]
DT[DT,by = c("Activity,Subject")]
DT[DT,mean]
DT[,mean(DT[,5]),by = c("Activity,Subject")]
DT[,mean(.S),by = c("Activity,Subject")]
DT[,mean(.SD),by = c("Activity,Subject")]
DT[,lapply(.SD,mean),by = c("Activity,Subject")]
head(DT[,lapply(.SD,mean),by = c("Activity,Subject")])
source('~/.active-rstudio-document', echo=TRUE)
data_set_tidy
View(data_set_tidy)
class(data_set_tidy)
class(DT)
t <- data.frame(DT)
class(t)
source('~/Dropbox/Coursera/Getting and Cleaning Data/run_analysis.R', echo=TRUE)
data_set_tidy
View(data_set_tidy)
write.csv(data_set_tidy,"Tidy_Data_Set.csv")
write.csv(data_set_tidy,"Tidy_Data_Set.txt")
write.txt(data_set_tidy,"Tidy_Data_Set.txt")
source('~/Dropbox/Coursera/Getting and Cleaning Data/run_analysis.R', echo=TRUE)
